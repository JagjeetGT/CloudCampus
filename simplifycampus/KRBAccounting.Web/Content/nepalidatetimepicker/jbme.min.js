(function () { var global = this; var jBME = global.jBME = function () { this.global = global; return this }; jBME.prototype = { sample: undefined, getSample: function () { } }; jBME.readyFunc = []; jBME.ready = function (e) { if (jBME.lockReady) { return } if (e == undefined) { while (jBME.readyFunc.length > 0) { var t = jBME.readyFunc.shift(); t() } } else { jBME.readyFunc.push(e) } }; jBME.meta = { cbme_clear: "cbme_clear", cbme_clear_item: "cbme_clear_item", cbme_disabled: "cbme_disabled", cbme_region_ignore: "cbme_region_ignore", cbme_selector: "cbme_selector", cbme_validator: "cbme_validator" }; jBME.EVENT = {}; jBME.context = { path: undefined, cid: undefined, isclosed: false, model: undefined, view: undefined, token: undefined, runtime: true }; jBME.util = { description: "Define common JavaScript functions in this package.", getURL: function () { return (jBME.context.cid ? "business.action?BMECID=" + jBME.context.cid + "&" : "query.action?") + "BMETimestamp=" + (new Date).getTime() + (jBME.context.token ? "&BMEWebToken=" + jBME.context.token : "") }, objectLength: function (e) { var t = 0; for (var n in e) { ++t } return t }, toString: function (e, t, n) { t = t || e; n = n || false; var r = t + "{ "; for (var i in e) { if (typeof e[i] == "function" && !n) { continue } r += i; r += ":"; r += e[i]; r += ", " } r += "}"; return r }, encodeId: function (e) { return e.replace("[", "\\[").replace("]", "\\]").replace(".", "\\.") }, getIdSelector: function (e) { e = jQuery.trim(e); if (e == "") { return "noneTagSelector" } var t = ""; var n = e.split(","); for (var r = 0; r < n.length; ++r) { var i = jQuery.trim(n[r]); t += i == "" ? "noneTagSelector" : "#" + this.encodeId(i); t += "," } return t }, getElementsOrderBySelector: function (e, t) { var n = []; var r = e.split(","); for (var i = 0; i < r.length; ++i) { var s = jQuery.trim(r[i]); if (s != "") { jQuery(s, t).each(function () { n.push(this) }) } } return jQuery(n) }, replaceElementsById: function (e, t, n, r) { var i = []; this.getElementsOrderBySelector(e, n || document).each(function (e) { var n = $(this); var s = t.find(jBME.util.getIdSelector(this.id)); if (this != s[0] && false !== (r ? r(this) : true)) { $(".bc_view").trigger("beforerender", this.id); n.replaceWith(s); i.push(s[0]) } }); return $(i) }, getNameByFunExp: function (e) { e = e || ""; var t = e.indexOf("("); if (t <= 0) { return jQuery.trim(e) } return jQuery.trim(e.substring(0, t)) }, getArgsByFunExp: function (functionExpresion) { function getArguments() { return arguments } functionExpresion = functionExpresion || ""; var iarg = functionExpresion.indexOf("("); if (iarg < 0) { return [] } var callExpression = "getArguments" + functionExpresion.substring(iarg); var argumentArrayObject = []; try { argumentArrayObject = eval(callExpression) || [] } catch (e) { } var argumentArray = new Array(argumentArrayObject.length); for (var i = 0; i < argumentArrayObject.length; ++i) { argumentArray[i] = argumentArrayObject[i] } return argumentArray }, isDisabled: function (e) { var t = jQuery(e); return e && (t.hasClass(jBME.meta.cbme_disabled) || t.is("[disabled]")) }, setDisabled: function (e, t) { if (e) { jQuery(e).toggleClass(jBME.meta.cbme_disabled, t) } } }; jBME.vars = { description: "Save var in this package." }; jBME.Fire = { description: "Define Fire(client-service) support JavaScript functions in this package." }; jBME.theme = { description: "Define theme support JavaScript functions in this package." }; jBME.validate = { description: "Define validate support JavaScript functions in this package.", setResult: function (e, t, n) { var r = jQuery("#" + e); if (!r.hasClass(jBME.meta.cbme_validator)) { r = r.find(".cbme_validator") } if (t == undefined) { r.removeAttr("vStatus") } else { r.attr("vStatus", t).attr("vMsg", n) } } }; jBME.web = { response: { head: "{BMEResult:", tail: "HEAD-END", example: "{BMEResult:{validation:'fail',exception:true}}HEAD-END\n" + "function(){//javascript codes;}  or HTML text." }, parseResponse: function (responseText) { responseText = responseText.replace(/(^\s*)/g, ""); var response = { head: jBME.web.response.head, body: responseText, result: {}, hasStrutsException: function () { return this.result.strutsException }, hasException: function () { return this.result.exception }, hasError: function () { return this.result.error }, passValidate: function () { return this.result.validation != "fail" } }; var iTail = responseText.indexOf(jBME.web.response.tail); if (response.head == responseText.substr(0, response.head.length) && iTail > 0) { response.head = responseText.substring(0, iTail); var jsonObj = eval("(" + response.head + ")"); response.result = jsonObj.BMEResult || {}; response.body = iTail < responseText.length ? responseText.substring(iTail + jBME.web.response.tail.length, responseText.length) : "" } return response }, isnavigating: false, navigate: function (e) { this.isnavigating = true; window.location.replace(e) } }; jQuery(document).ready(function (e) { jBME.ready(); var t = jQuery(".bc_view"); t.trigger("load"); jQuery(document.body).onLoadHelp(); var n = jQuery(window); n.bind("beforeunload.bme unload.bme", function (e) { if (e.type == "beforeunload") { n.unbind("unload.bme") } e.type = "unload"; t.trigger(e); if (e.isDefaultPrevented()) { return false } var r = jBME.web.isnavigating; r |= parent != self && parent.jBME && parent.jBME.context.cid == jBME.context.cid; r |= window.frameElement && frameElement.popWindow && frameElement.popWindow.jBME && frameElement.popWindow.jBME.context.cid == jBME.context.cid; if (!r) { n.closeConversation() } }) }) })(); (function () { jBME.FireTag = function (e, t, n, r) { this.init(); this.setId(e || "FireTag_" + (new Date).getTime()); this.setParentid(t || ""); this.setEvent(n || "click"); this.setMode(r || ""); this.setModel(jBME.context.model); this.setView(jBME.context.view); return this }; jBME.FireTag.prototype = { id: "", jqFire: undefined, setId: function (e) { this.id = e; this.jqFire = jQuery("#" + e); if (this.jqFire.length == 0) { this.jqFire = jQuery('<div id="' + this.id + '" class="bc_fire"></div>') } this.jqFire.data("FireTag", this) }, parentid: "", setParentid: function (e) { this.parentid = e }, event: "", setEvent: function (e) { this.event = (e || "").replace(",", " ") }, mode: "", setMode: function (e) { this.mode = e; if (this.mode != undefined) { this.options.data["bmeEvent.mode"] = e } }, bindid: undefined, setBindid: function (e) { this.bindid = e }, getRealBindids: function () { return jQuery(this.bindid ? this.bindid.split(",") : jBME.Fire.util.getFireAgents(this.parentid)) }, getBinders: function () { var e = []; var t = this.getRealBindids(); for (var n = 0; n < t.length; ++n) { var r = jBME.util.getIdSelector(t[n]); var i = r.indexOf("#popwin_") >= 0 ? jQuery(window.frameElement, parent.document).closest(".popwin").find(r) : jQuery(r); if (i.length > 0) { e.push(i[0]) } } return jQuery(e) }, regionid: undefined, regionSelector: "#body", setRegionid: function (e) { this.regionid = e; if (e != undefined) { this.regionSelector = jBME.util.getIdSelector(e); this.options.data["bmeEvent.regionid"] = e } else { this.regionSelector = document; delete this.options.data["bmeEvent.regionid"] } }, targetid: undefined, targetSelector: "dummytag", setTargetid: function (e) { this.targetid = e; if (e != undefined) { this.targetSelector = jBME.util.getIdSelector(e); this.options.data["bmeEvent.targetid"] = e } else { this.targetSelector = "dummytag"; delete this.options.data["bmeEvent.targetid"] } }, validation: true, setValidation: function (e) { this.validation = e; if (e != undefined) { this.options.data["bmeEvent.validation"] = "" + e } }, service: undefined, setService: function (e) { this.service = e }, syncServiceArgs: function () { delete this.options.data["bmeEvent.service"]; delete this.options.data["BMEParam"]; if (this.service != undefined) { this.options.data["bmeEvent.service"] = jBME.util.getNameByFunExp(this.service); var e = jBME.util.getArgsByFunExp(this.service); if (e && e.length > 0) { this.options.data["BMEParam"] = e } } return this }, targetstep: undefined, setTargetstep: function (e) { this.targetstep = e; if (e != undefined) { this.options.data["bmeEvent.targetstep"] = e } }, sourceid: undefined, setSourceid: function (e) { this.sourceid = e; if (e != undefined) { this.options.data["bmeEvent.sourceid"] = e } }, view: undefined, setView: function (e) { this.view = e; if (e != undefined) { this.options.data["bmeEvent.view"] = e } }, model: undefined, setModel: function (e) { this.model = e; if (e != undefined) { this.options.data["bmeEvent.model"] = e } }, setExport: function (e) { this.dynattr["export"] = e; if (e != undefined) { this.options.data["bmeEvent.export"] = e } }, monitor: true, setMonitor: function (e) { this.monitor = e }, popup: undefined, setPopup: function (e, t, n) { this.popup = { title: e, width: t, height: n} }, onbefore: undefined, setOnbefore: function (e) { this.onbefore = e }, callOnbefore: function () { var result = this.onbefore instanceof Function ? this.onbefore.apply(this) : eval(this.onbefore); if (this.jqFire && result !== false) { this.jqFire.triggerHandler("before") } return result }, script: undefined, setScript: function (e) { this.script = e }, callScript: function () { return this.script instanceof Function ? this.script.call(this) : eval(this.script) }, onresponse: undefined, setOnresponse: function (e) { this.onresponse = e }, callOnresponse: function (response) { var result = this.onresponse instanceof Function ? this.onresponse.call(this, response) : eval(this.onresponse); if (this.jqFire && result !== false) { this.jqFire.triggerHandler("response") } return result }, oneach: undefined, setOneach: function (e) { this.oneach = e }, callOneach: function (target) { var result = this.oneach instanceof Function ? this.oneach.call(this, target) : eval(this.oneach); if (this.jqFire && result !== false) { this.jqFire.triggerHandler("each") } return result }, onerror: undefined, setOnerror: function (e) { this.onerror = e; if (e != undefined) { this.options.data["bmeEvent.errorMode"] = e } }, callOnerror: function (e, t) { var n = e.onerror; if (n == undefined) { var r = e.mode; if (r == "render" || r == "export" || r == "validate" || r == "webutil") { n = "popup" } } if (n instanceof Function) { n.call(this) } else { if (n == "popup") { var i = new jBME.FireTag; i.setMode("popup"); i.setRegionid(""); i.setTargetid(""); i.popup = this.popup || { title: t.result.poptitle, width: 500, height: 350 }; i.setValidation(false); jBME.Fire.execute(i) } else { var s = e.options.url; jBME.web.navigate(s) } } }, onafter: undefined, setOnafter: function (e) { this.onafter = e }, callOnafter: function () { var result = this.onafter instanceof Function ? this.onafter.call(this) : eval(this.onafter); if (this.jqFire && result !== false) { this.jqFire.triggerHandler("after") } }, dynattr: undefined, jEvent: undefined, postdata: undefined, toString: function () { return jBME.util.toString(this, "jBME.FireTag") }, options: undefined, init: function () { this.options = { url: jBME.util.getURL(), type: "post", cache: false, data: { BMEClear: [], BMEClearItem: [] }, dataType: "text", beforeSubmit: function (e, t, n) { return true }, success: function (e, t, n) { }, error: function (e, t, n) { } }; this.dynattr = [] } } })(); jBME.Fire.util = { agent: "jBME.Fire.util.agent", addFireAgent: function (e, t) { var n = jQuery("#" + e); if (n.length == 0) { return } if (n.data(jBME.Fire.util.agent) == undefined) { n.data(jBME.Fire.util.agent, []) } n.data(jBME.Fire.util.agent).push(t); if (n.hasClass(jBME.meta.cbme_disabled)) { jQuery("#" + t).addClass(jBME.meta.cbme_disabled) } }, appendPresetFireAgents: function (e, t) { if (e.hasClass("bc_field")) { jQuery(":input", e).each(function () { if (!t[this.id]) { t.push(this.id); if (jBME.util.isDisabled(e[0])) { jBME.util.setDisabled(this, true) } } }) } }, getFireAgents: function (e, t) { t = t || []; var n = jQuery("#" + e); var r = n.data(jBME.Fire.util.agent) || []; this.appendPresetFireAgents(n, r); if (r.length == 0 && !t[e]) { t.push(e) } for (var i = 0; i < r.length; ++i) { if (e == r[i]) { t.push(e) } else { this.getFireAgents(r[i], t) } } return t }, setRegionValidateSuccess: function (e) { jQuery(e.regionSelector).getInputs().each(function () { if (jBME.util.objectLength($(this).rules()) > 0) { jBME.validate.setResult(this.id, "success", "") } }) } }; (function () { jBME.Fire.Mode = function (e) { this.mode = e; this.init(); this.SUPER = jBME.Fire.Mode.prototype; return this }; jBME.Fire.Mode.register = function (e) { if (e instanceof Function) { e.apply() } }; jBME.Fire.Mode.prototype = { mode: "anonymous", init: function () { jBME.Fire.Mode[this.mode] = this }, execute: function (e, t) { this.onInit(e, t); if (t && jBME.util.isDisabled(t.currentTarget)) { return false } if (this.canExecute(e) === false) { return false } var n = jQuery(e.regionSelector); var r = n.getInputs(); if (this.onBefore(e, r) === false) { return false } var i = jQuery.extend(true, {}, e.syncServiceArgs().options); i.data = jQuery.extend(e.postdata, i.data); this.onVisit(e, r, i.data); e.callScript(); this.onLock(e); n.ajaxRegionSubmit(i) }, onInit: function (e, t) { var n = this; e.options.success = function (t, r, i) { n.onResponse(e, t, r, i) }; e.options.error = function (t, r, i) { n.onError(e, t, r, i) }; e.postdata = {}; if (t != undefined) { if (t.postdata) { e.postdata = t.postdata } else { t.postdata = e.postdata } e.jEvent = t; window.jEvent = t } }, lockTarget: undefined, onLock: function (e) { if (e.jEvent) { this.lockTarget = e.jEvent.currentTarget; jBME.util.setDisabled(this.lockTarget, true) } if (e.monitor) { jBME.theme.block.on(e) } }, onUnlock: function (e) { if (e.monitor) { jBME.theme.block.off(e) } if (e.jEvent && this.lockTarget) { jBME.util.setDisabled(this.lockTarget, false); this.lockTarget = undefined } }, canExecute: function (e) { return true }, onBefore: function (e, t) { if (e.validation && !t.valid(true)) { return false } if (e.callOnbefore() === false) { return false } }, onVisit: function (e, t, n) { for (var r = 0, i = t.length; r < i; ++r) { var s = t[r]; this.onVisitElement(e, s, n) } }, onVisitElement: function (e, t, n) { var r = jQuery(t); r.trigger({ type: "beforesubmit", postdata: n }); if (r.hasClass(jBME.meta.cbme_clear) && !n["BMEClear"][t.name]) { n["BMEClear"][t.name] = true; n["BMEClear"].push(t.name) } if (r.hasClass(jBME.meta.cbme_clear_item)) { var i = r.attr("orgName") + ":" + r.val(); if (!n["BMEClearItem"][i]) { n["BMEClearItem"][i] = true; n["BMEClearItem"].push(i) } } }, onError: function (e, t, n, r) { this.onUnlock(e) }, onResponse: function (e, t, n, r) { var i = jBME.web.parseResponse(t); var s = undefined; if (e.callOnresponse(i) !== false) { this.onResponseValidateResult(e, i); if (i.hasStrutsException()) { s = this.onResponseStrutsException(e, i) } else if (i.hasException()) { s = this.onResponseException(e, i) } else if (i.hasError()) { s = this.onResponseError(e, i) } else if (i.passValidate()) { s = this.onResponseSuccess(e, i) } else { s = this.onResponseFailed(e, i) } } this.onUnlock(e); if (s !== false) { this.onAfter(e) } }, onResponseValidateResult: function (jFireTag, response) { if (jFireTag.validation) { if (response.passValidate()) { jBME.Fire.util.setRegionValidateSuccess(jFireTag) } else if (!response.hasException()) { try { eval(response.body) } catch (e) { } } jBME.theme.validate.doAfter(jQuery(jFireTag.regionSelector).getInputs()) } }, onResponseSuccess: function (e, t) { }, onResponseFailed: function (e, t) { return false }, onResponseError: function (e, t) { e.callOnerror(e, t); return false }, onResponseException: function (e, t) { e.callOnerror(e, t); return false }, onResponseStrutsException: function (e, t) { if (t.result.errorMode == "popup") { jQuery.popwin.model(t.result.poptitle, "exceptionProcessor.action", "600px", "350px") } else { jBME.web.navigate("exceptionProcessor.action") } return false }, onAfter: function (e) { e.callOnafter(); window.jEvent = undefined; e.jEvent = undefined; e.postdata = undefined } } })(); (function () { jBME.Fire.execute = function (e, t) { var n = jBME.Fire.Mode[e.mode]; if (n instanceof jBME.Fire.Mode) { n.execute(e, t) } }; jBME.Fire.bind = function (e) { e.getBinders().bind(e.event, function (t) { jBME.Fire.execute(e, t) }) } })(); (function () { jBME.Fire.Mode.register(function () { var e = new jBME.Fire.Mode("validate"); e.canExecute = function (e) { e.setTargetid("") } }); jBME.Fire.Mode.register(function () { var e = new jBME.Fire.Mode("render"); e.onResponseSuccess = function (e, t) { var n = jQuery("<div>" + t.body + "</div>"); var r = jBME.util.replaceElementsById(e.targetSelector, n, document, function (t) { return e.callOneach(t) }); jBME.ready(); r.onLoadHelp() } }); jBME.Fire.Mode.register(function () { var e = new jBME.Fire.Mode("export"); e.canExecute = function (e) { e.setTargetid("") }; e.onResponseSuccess = function (e, t) { var n = $("#bmefile"); if (n.size() > 0) { n.remove() } var r = "download.action?bmeEvent.filename=" + t.body + "&BMETimestamp=" + (new Date).getTime() + "&BMEWebToken=" + jBME.context.token; n = $('<iframe id="bmefile" src="' + r + '"/>'); n.css({ position: "absolute", top: "-1000px", left: "-1000px" }); n.appendTo("body") } }); jBME.Fire.Mode.register(function () { var e = new jBME.Fire.Mode("widget"); e.onError = function (e, t, n, r) { this.SUPER.onError.apply(this, arguments); var i = e.dynattr["jqWidgetPad"]; if (i) { var s = jQuery("label", i); s.text(t.status + " " + t.statusText); s.toggle(); i.attr("title", e.view); i.html(s) } }; e.onResponseSuccess = function (e, t) { if (e.targetid) { jBME.Fire.Mode["render"].onResponseSuccess.apply(this, arguments) } else if (e.dynattr["jqWidgetPad"]) { var n = e.dynattr["jqWidgetPad"]; var r = jQuery(t.body).filter(".page"); n.replaceWith(r); jBME.ready(); r.onLoadHelp() } } }); jBME.Fire.Mode.register(function () { var e = new jBME.Fire.Mode("navigate"); e.onResponseSuccess = function (t, n) { if (t.targetid != undefined) { jQuery.post(t.options.url, {}, function (n) { jQuery(t.targetSelector).replaceWith(n); jBME.ready(); e.onAfter(t) }, "text"); return false } else { jBME.web.navigate(t.options.url) } } }); jBME.Fire.Mode.register(function () { var e = new jBME.Fire.Mode("popup"); e.onResponseSuccess = function (t, n) { function r(n) { n = n || []; var r = n[0]; var i = n[1]; if (i) { e.onResponseStrutsException(r, i); return false } if (r && (r.targetid || t.targetid)) { var s = new jBME.FireTag; s.setMode("render"); s.setRegionid(""); s.setValidation(false); s.setTargetid(r.targetid || t.targetid); s.setOneach(r.oneach); s.setOnafter(function () { e.onAfter(t) }); jBME.Fire.execute(s) } else { e.onAfter(t) } } jQuery.popwin.firePopup(t.popup.title, t.options.url, r, t.popup.width, t.popup.height); return false } }); jBME.Fire.Mode.register(function () { var e = new jBME.Fire.Mode("popin"); e.onResponseStrutsException = function (e, t) { jQuery.popwin.closeSelect(arguments); return false }; e.onAfter = function (e) { this.SUPER.onAfter.apply(this, arguments); jQuery.popwin.closeSelect(arguments) } }); jBME.Fire.Mode.register(function () { var e = new jBME.Fire.Mode("webutil"); e.canExecute = function (e) { e.setTargetid("") } }); jBME.Fire.Mode.register(function () { var e = new jBME.Fire.Mode("client"); e.callService = function (e) { if (e.service) { var t = new Function("var f=this." + e.service + "\n; if(f instanceof Function){f.call(this);}"); var n = $(e.targetSelector); if (n.size() > 0) { n.each(function () { if (e.callOneach(this) !== false) { t.call($(this)) } }) } else { t.call($target) } } }; e.execute = function (e, t) { this.onInit(e, t); if (t && jBME.util.isDisabled(t.currentTarget)) { return false } if (e.callOnbefore() !== false) { e.callScript(); this.callService(e); e.callOnafter() } } }) })(); jBME.Fire.Mode.register(function () { var e = new jBME.Fire.Mode("sampleCustomMode"); { } }); (function (e) { jQuery.fn.bmeClientServiceSample = function () { alert("This is the sample of BME Client Service Definition.\n" + '1) "jQuery.fn" means jQuery.prototype\n' + '2) "bmeClientServiceSample" is Client Service name\n' + '3) "this" object point to jQuery("...") object.\n'); return this }; jQuery.fn.closeConversation = function () { if (jBME.context.cid && !jBME.context.isclosed) { var e = new jBME.FireTag; e.setMode("webutil"); e.setService("closeConversation()"); e.setValidation(false); e.setMonitor(false); e.setRegionid(""); e.setTargetid(""); e.options.url += "&BMECIDClosing=1"; jBME.context.isclosed = true; jBME.Fire.execute(e) } return this } })(jQuery); (function () { jBME.ComboBox = function (e) { this.attach(e); return this }; jBME.ComboBox.DROPDOWN_MIN_HEIGHT = 50; jBME.ComboBox.DROPDOWN_MAX_HEIGHT = undefined; jBME.ComboBox.prototype = { jqCombo: undefined, jqSelect: undefined, jqDrop: undefined, dropPoper: undefined, jqFirstCheck: undefined, attach: function (e) { this.jqCombo = jQuery(jBME.util.getIdSelector(e)).filter(".bc_combobox"); this.jqSelect = jQuery(".bc_combobox_select", this.jqCombo); this.jqDrop = jQuery(".bc_combobox_dropdown", this.jqCombo); this.dropPoper = new jBME.Poper(this.jqDrop); this.jqFirstCheck = this.jqDrop.find(":checkbox:first"); this.updateSelectText(true); this.updatePosition(); this.activate() }, activate: function () { var e = this; this.jqSelect.bind("click", function (t) { if (jBME.util.isDisabled(e.jqCombo)) { return } if (e.jqDrop.is(":hidden")) { e.updatePosition() } e.dropPoper.toggle(e.jqSelect) }); jQuery(document).bind("click", function (t) { if (e.jqDrop.is(":visible") && $(t.target).closest(".bc_combobox_select")[0] != e.jqSelect[0]) { if (t.pageX >= e.jqDrop.offset().left && t.pageX <= e.jqDrop.offset().left + e.jqDrop.outerWidth() && t.pageY >= e.jqDrop.offset().top && t.pageY <= e.jqDrop.offset().top + e.jqDrop.outerHeight()) { return } e.dropPoper.hide() } }); jQuery(":checkbox", this.jqDrop).bind("click", function (t) { $(this).valid(); e.updateSelectText(); t.stopPropagation() }); jQuery(".bc_comboboxitem", this.jqDrop).bind("click", function (t) { var n = jQuery(this).find(":checkbox"); n.attr("checked", !n.attr("checked")); n.valid(); e.updateSelectText() }) }, updatePosition: function () { this.jqDrop.width(this.jqSelect.outerWidth() - 3); if (jQuery(":checkbox", this.jqDrop).length == 0) { this.jqDrop.height(jBME.ComboBox.DROPDOWN_MIN_HEIGHT) } }, updateSelectText: function (e) { var t = this; var n = ""; jQuery(":checked", t.jqDrop).each(function (e) { var r = jQuery("#" + this.id + "_text", t.jqDrop); if (n != "") { n += "," } n += r.text() }); this.jqSelect.find(":input").val(n); if (e) { this.jqSelect.find(":input").attr("defaultValue", n) } } } })(); (function () { jBME.Pagenation = function (e, t) { this.loopSupportID = e; this.pageID = this.getPageID(); this.pagenationObj = $("#" + this.pageID); this.curPageObj = $("#" + this.pageID + "_curPage"); this.totalPageObj = $("#" + this.pageID + "_totalPage"); this.gotoObj = $("#" + this.pageID + "_goto"); this.service = t; this.init(); return this }; jBME.Pagenation.prototype = { pageID: "", loopSupportID: "", pagenationObj: "", curPageObj: "", totalPageObj: "", gotoObj: "", service: "", getPageID: function () { return $("#" + this.loopSupportID).find(".bc_pagenation").attr("id") }, bindPageEvent: function (e, t, n) { var r = new jBME.FireTag("", e, t, "loadPageData"); r.setRegionid(this.loopSupportID); r.setTargetid(this.loopSupportID); r.setService(this.service); r.pageID = this.pageID; r.pagenation = this; r.bindObj = $("#" + e); r.prepareFunc = n; jBME.Fire.bind(r) }, setFirstPage: function (e) { e.curPageObj.val("1"); return true }, setPreviousPage: function (e) { e.curPageObj.val(Number(e.curPageObj.val()) - 1); return true }, setNextPage: function (e) { e.curPageObj.val(Number(e.curPageObj.val()) + 1); return true }, setLastPage: function (e) { e.curPageObj.val(e.totalPageObj.val()); return true }, setGotoPage: function (e) { if (0 == Number(e.totalPageObj.val())) { return false } var t = Number(e.gotoObj.val()); if (t < 1) { e.curPageObj.val("1"); return true } if (t > Number(e.totalPageObj.val())) { e.curPageObj.val(e.totalPageObj.val()); return true } e.curPageObj.val(t); return true }, init: function () { this.bindPageEvent(this.pageID + "_first", "click", this.setFirstPage); this.bindPageEvent(this.pageID + "_previous", "click", this.setPreviousPage); this.bindPageEvent(this.pageID + "_next", "click", this.setNextPage); this.bindPageEvent(this.pageID + "_last", "click", this.setLastPage); this.bindPageEvent(this.pageID + "_goto", "change", this.setGotoPage); this.bindPageEvent(this.pageID + "_recordPerPage", "change"); $("#" + this.pageID + "_goto").bind("keypress", function (e) { var t = e.which; if (!(t >= 48 && t <= 57 || t == 8 || t == 13)) { e.preventDefault(); return false } }) } } })(); jBME.Fire.Mode.register(function () { var e = new jBME.Fire.Mode("loadPageData"); e.canExecute = function (e) { if (e.bindObj.hasClass("paginate_disabled_first") || e.bindObj.hasClass("paginate_disabled_previous") || e.bindObj.hasClass("paginate_disabled_next") || e.bindObj.hasClass("paginate_disabled_last")) { return false } if (e.prepareFunc) { return e.prepareFunc(e.pagenation) } }; e.onResponseSuccess = function (e, t) { var n = jBME.Fire.Mode["render"].onResponseSuccess.apply(this, arguments); var r = new jQuery.Event("after"); r.stopPropagation(); $("#" + e.pagenation.getPageID()).trigger(r); return n } }); jBME.Fire.Mode.register(function () { var e = new jBME.Fire.Mode("updateBigTable"); e.onResponseSuccess = function (e, t) { var n = $(t.body); var r = $(e.bigTable.tableBodySelector, n); var i = $("#" + e.bigTable.tableID + "_totalNo", n); var s = Number(i.val()); e.bigTable.saveToCache(s, r); e.bigTable.from = e.from; e.bigTable.to = e.to; e.bigTable.showCache(); e.bigTable.loading = false; e.bigTable.judgeAndGetNewData(); jBME.ready() } }); (function () { jBME.BigTable = function (e, t, n) { this.service = t; this.tableID = e; this.tableBodySelector = "#" + e + "_tbody"; this.container = $("#" + e); this.tableObj = $("#" + e + "_table"); this.tableOuter = this.tableObj.parent(); this.scrollObj = this.container.find("div.bigtable_scrollbar:eq(0)"); this.scrollInnerObj = this.scrollObj.find("div:eq(0)"); this.tableHeadObj = $("#" + e + "_head"); this.tableBodyObj = $(this.tableBodySelector, this.container); this.cols = this.tableHeadObj.find("th").length; this.rowH = this.tableBodyObj.find("tr:eq(0)").outerHeight(); this.scrollFocus = false; this.perNo = 10; this.cacheScreenNo = 3; this.cacheNo = this.perNo * (this.cacheScreenNo * 2 + 1); this.from = 0; this.to = this.from + this.cacheNo + 1; this.topNo = 0; this.totalNo = Number($("#" + e + "_totalNo").val()); this.loading = false; this.curIDArr = n; this.tdValueArr = []; this.curTdArr = []; this.init(); return this }; jBME.BigTable.prototype = { saveCurTd: function () { var e = this.tableBodyObj.children("tr"); for (var t = 0; t < this.perNo; t++) { var n = $(e[t]).children("td"); this.curTdArr.push(n) } }, saveToCache: function (e, t) { this.totalNo = e; this.tdValueArr.length = 0; if (0 != e) { var n = t.children("tr"); this.to = this.from + n.length; for (var r = 0; r < n.length; r++) { var i = $(n[r]).children("td"); var s = new Array; i.each(function () { s.push($(this).html()) }); this.tdValueArr.push(s) } for (var o = 0; o < this.perNo - n.length; o++) { var u = $(n[0]).clone(); var a = 0; u.children("td").each(function () { var e = " "; if (0 == a) { e = "<label class='bc bc_label'> </label>" } a++; $(this).html(e) }); u.appendTo(t) } } }, showCache: function () { for (var e = 0; e < this.tableBodyRowArr.length; e++) { if (this.topNo + e >= this.to) { break } var t = this.tdValueArr[this.topNo + e - this.from]; if (!t) { this.curTdArr[e].each(function () { this.innerHTML = " " }); this.curTdArr[e][0].innerHTML = "<label class='bc bc_label'>loading</label>"; return } for (var n = 0; n < this.cols; n++) { this.curTdArr[e][n].innerHTML = t[n] } } }, init: function () { this.saveToCache(this.totalNo, this.tableBodyObj); this.saveCurTd(); if (this.totalNo > this.perNo) { $("tr", this.tableBodyObj).slice(this.perNo).remove() } this.tableBodyRowArr = this.tableBodyObj.children("tr"); this.scrollBar(); this.scrollInnerObj.height(this.totalNo * this.rowH) }, scrollBar: function () { var e = this; this.scrollObj.bind("scroll", function () { e.scrollHandler(e) }); var t = this.tableHeadObj.height(); var n = this.tableObj.outerHeight(); this.scrollObj.css({ height: n - t + "px", "margin-top": t + 2 + "px" }); this.tableOuter.css({ "margin-top": -n + "px" }); this.tableOuter.bind("mouseover", function () { e.scrollFocus = true }); this.tableOuter.bind("mouseout", function () { e.scrollFocus = false }); if (document.addEventListener) { this.tableObj.context.addEventListener("DOMMouseScroll", function (t) { return e.scrollFunc(t, e) }, false) } else { window.onmousewheel = document.onmousewheel = function (t) { e.scrollFunc(t, e) } } if ($.browser.msie) { this.tableOuter.css({ width: this.scrollObj.width() - 16 + "px" }); this.scrollObj.bind("resize", function () { this.tableOuter.width(this.scrollObj.width() - 16) }) } }, scrollHandler: function (e) { var t = parseInt(e.scrollObj.scrollTop() / e.scrollInnerObj.height() * e.totalNo); e.topNo = t; if (e.judgeAndGetNewData()) { return } e.showCache() }, judgeAndGetNewData: function () { if (!this.needNewData()) { return false } var e = this.topNo - this.perNo * 3 - 1; if (e < 0) { e = 0 } var t = e + this.cacheNo; if (t > this.totalNo) { t = this.totalNo } this.getNewData(e, t); return true }, scrollFunc: function (e, t) { if (!t.scrollFocus) { return } e = e || window.event; if ($.browser.mozilla && e.stopPropagation) { e.preventDefault(); if (!e.stopPropagation()) { e.cancelBubble = true; e.returnValue = false } } var n = 0; if (e.wheelDelta) { n = e.wheelDelta * -.25 } else if (e.detail) { n = e.detail * 10 } var r = t.scrollObj.scrollTop() + n; t.scrollObj.scrollTop(r); return false }, setLockScreen: function () { }, refreshData: function () { this.getNewData(this.from, this.to) }, needNewData: function () { if (this.loading) { return false } if (this.topNo < this.from) { return true } if (this.topNo + this.perNo > this.to) { return true } return false }, getNewData: function (e, t) { var n = new jBME.FireTag("", this.tableID, "click", "updateBigTable"); n.setRegionid(this.tableID + "_foot"); n.setTargetid(this.tableID); n.setService(this.service + "('" + e + "', '" + t + "')"); n.bigTable = this; n.from = e; n.to = t; jBME.Fire.execute(n); this.loading = true }, getCurIDArr: function () { return this.curIDArr } } })(); (function () { jBME.DblSelectbox = function (e) { this.attach(e); return this }; jBME.DblSelectbox.prototype = { jqSubmit: undefined, jqLeft: undefined, jqRight: undefined, attach: function (e) { this.jqSubmit = jQuery(jBME.util.getIdSelector(e + "_submit")); this.jqLeft = jQuery(jBME.util.getIdSelector(e + "_left")); this.jqRight = jQuery(jBME.util.getIdSelector(e + "_right")); var t = this; this.jqLeft.bind("dblclick", function () { t.moveToRight() }); this.jqRight.bind("dblclick", function () { t.moveToLeft() }); this.copyToSubmit() }, copyToSubmit: function () { var e = this; e.jqSubmit.empty(); jQuery("option", this.jqRight).each(function () { $(this).clone().appendTo(e.jqSubmit).attr("selected", "selected") }); this.adjustSize() }, adjustSize: function () { this.jqLeft.css("width", "auto"); this.jqRight.css("width", "auto"); this.jqLeft.css("width", "100%"); this.jqRight.css("width", "100%") }, moveUp: function () { var e = jQuery("option:selected", this.jqRight); if (0 == e.length) { return } if (0 == e.first().prev().length) { return } e.each(function () { var e = $(this); e.insertBefore(e.prev()) }); this.adjustSize() }, moveDown: function () { var e = jQuery("option:selected", this.jqRight); if (0 == e.length) { return } if (0 == e.last().next().length) { return } for (var t = e.length - 1; t >= 0; t--) { var n = $(e.get(t)); n.insertAfter(n.next()) } this.adjustSize() }, moveToRight: function () { this.moveSelected(this.jqLeft, this.jqRight) }, moveToLeft: function () { this.moveSelected(this.jqRight, this.jqLeft) }, moveAllToRight: function () { this.moveAll(this.jqLeft, this.jqRight) }, moveAllToLeft: function () { this.moveAll(this.jqRight, this.jqLeft) }, moveSelected: function (e, t) { var n = this; var r = jQuery("option:selected", e); if (0 == r.length) { return } r.each(function () { $(this).appendTo(t) }); this.copyToSubmit() }, moveAll: function (e, t) { var n = this; var r = jQuery("option", e); if (0 == r.length) { return } r.each(function () { $(this).appendTo(t) }); this.copyToSubmit() } } })(); (function () { function e(e) { e.css("left", document.documentElement.scrollLeft); e.css("top", document.documentElement.scrollTop); e.width(document.documentElement.offsetWidth); e.height(document.documentElement.offsetHeight) } function t() { var t = $("body"); jqMask = $("<div class='bf_mask'></div>"); t.append(jqMask); $(window).bind("resize.mask", function () { e(jqMask) }); jqMask.css("z-index", 999); return jqMask } function n(n) { if (!n.mask) { return } if (undefined == n.jqMask) { n.jqMask = t() } e(n.jqMask); n.jqMask.show() } function r(e) { if (undefined == e.jqMask) { return } e.jqMask.remove(); e.jqMask = undefined } function i(e) { if (undefined != e.jqAfterWrap) { return } e.jqAfterWrap = e.jqPop; if (undefined == e.wrapperFunc) { e.jqAfterWrap.appendTo("body"); e.jqAfterWrap.css("z-index", 999); return } if (undefined == e.jqWrapper) { e.jqWrapper = e.wrapperFunc.apply() } e.jqPop.css("position", "static"); e.jqPop.show(); jBME.lockReady = true; e.jqPop.appendTo(e.jqWrapper.jqContent); jBME.lockReady = false; e.jqAfterWrap = e.jqWrapper } function s(e) { if (undefined == e.jqPopFrom) { return } e.popFromInfo = c(e.jqPopFrom) } function o(e) { i(e); s(e); h(e); var t = l(); var n = $.extend(true, {}, e.popFromInfo); p(e, n, t); d(e, n, t); e.jqAfterWrap.css({ left: n.left + "px", top: n.top + "px" }); e.jqAfterWrap.show(); e.jqAfterWrap.fixSelectorBug() } function u(e) { if (undefined == e.jqAfterWrap) { return } e.jqAfterWrap.hide(); e.jqPop.hide(); e.jqPop.css("position", "absolute"); if (undefined != e.jqPopParent) { jBME.lockReady = true; e.jqPop.appendTo(e.jqPopParent); jBME.lockReady = false } if (undefined != e.jqWrapper) { e.jqWrapper.jqContent.empty(); e.jqWrapper.remove(); e.jqWrapper = undefined } e.jqAfterWrap = undefined } function a() { return { left: 0, top: 0, right: 0, bottom: 0} } function f() { return { left: 0, top: 0, width: 0, height: 0} } function l() { var e = document.documentElement; var t = document.body; return { scrollTop: e.scrollTop + t.scrollTop, scrollHeight: e.scrollHeight, scrollLeft: e.scrollLeft + t.scrollLeft, scrollWidth: e.scrollWidth, offsetHeight: e.offsetHeight, offsetWidth: e.offsetWidth} } function c(e) { jqObj = $(e); var t = f(); t.left = jqObj.offset().left; t.top = jqObj.offset().top; t.width = jqObj.outerWidth(); t.height = jqObj.outerHeight(); return t } function h(e) { var t = e.jqAfterWrap.is(":hidden"); e.jqAfterWrap.css("left", "-1000px"); e.jqAfterWrap.show(); if (undefined != e.jqWrapper) { var n = e.jqWrapper.jqContent; var r = n.outerWidth(true) - n.width(); e.jqAfterWrap.width(n.width() + r) } e.popWidth = e.jqAfterWrap.outerWidth(); e.popHeight = e.jqAfterWrap.outerHeight(); if (t) { e.jqAfterWrap.hide() } } function p(e, t, n) { if (e.bottomFirst) { t.top = e.popFromInfo.top + e.popFromInfo.height + e.offsetInfo.top; e.resultBottom = true; if (t.top - n.scrollTop + e.popHeight - e.offsetInfo.bottom > n.offsetHeight) { e.resultBottom = false; t.top = e.popFromInfo.top - e.popHeight + e.offsetInfo.bottom } } else { t.top = e.popFromInfo.top - e.popHeight + e.offsetInfo.bottom; e.resultBottom = false; if (t.top - n.scrollTop - e.offsetInfo.top < 0) { e.resultBottom = true; t.top = e.popFromInfo.top + e.popFromInfo.height + e.offsetInfo.top } } if (t.top - n.scrollTop - e.offsetInfo.top < 0 || t.top - n.scrollTop + e.popHeight - e.offsetInfo.bottom > n.offsetHeight) { t.top = n.scrollTop } } function d(e, t, n) { e.resultRight = true; t.left = e.popFromInfo.left + e.offsetInfo.left; if (t.left - n.scrollLeft + e.popWidth - e.offsetInfo.right > n.offsetWidth) { e.resultRight = false; t.left = e.popFromInfo.left + e.popFromInfo.width - e.popWidth + e.offsetInfo.right } if (t.left < n.scrollLeft + e.offsetInfo.left) { t.left = n.scrollLeft } } jBME.Poper = function (e) { this.setPop(e); this.offsetInfo = a(); return this }; jBME.Poper.prototype = { $view: $(".bc_view"), jqPopFrom: undefined, jqPop: undefined, jqPopParent: undefined, jqMask: undefined, mask: false, wrapperFunc: undefined, jqWrapper: undefined, bottomFirst: true, resultBottom: true, resultRight: true, popFromInfo: undefined, offsetInfo: undefined, jqAfterWrap: undefined, popWidth: undefined, popHeight: undefined, eventName: undefined, createShadowWrapper: function () { var e = '<div class="bf_shadow">'; e += '<div head="true">'; e += '<div l="true"></div>'; e += '<div r="true"></div>'; e += '<div c="true"></div>'; e += "</div>"; e += '<div ml="true"><div mr="true" content="true"></div></div>'; e += '<div foot="true" id="foot">'; e += '<div l="true"></div>'; e += '<div r="true"></div>'; e += '<div c="true"></div>'; e += "</div>"; e += "</div>"; var t = $(e); t.jqContent = t.find("[content]"); t.appendTo("body"); t.css("z-index", 999); return t }, setPop: function (e) { if (undefined == e) { return } this.jqPop = e; this.jqPopParent = e.parent() }, defaultWrap: function () { this.wrapperFunc = this.createShadowWrapper }, setPopFromInfoByDom: function (e) { this.popFromInfo = c(e) }, setPopFromInfoByEvent: function (e) { this.popFromInfo = f(); this.popFromInfo.left = mouseX(e); this.popFromInfo.top = mouseY(e) }, toggle: function (e) { if (this.isShow()) { this.hide(); return } this.show(e) }, isShow: function () { if (undefined == this.jqAfterWrap) { return false } return this.jqAfterWrap.is(":visible") }, showIn: function (e, t) { this.popFromInfo = f(); this.show(); this.jqAfterWrap.css({ left: e + "px", top: t + "px" }) }, show: function (e) { if (undefined != e) { this.jqPopFrom = e } n(this); o(this); if (undefined == this.jqWrapper) { return } this.eventName = "beforerender." + this.jqPop.attr("id"); var t = this; $(".bc_view").unbind(this.eventName).bind(this.eventName, function (e, n) { if (t.jqPop.closest("[id=" + n + "]")) { t.hide() } }) }, hide: function () { u(this); r(this); this.$view.unbind(this.eventName) } } })(); (function () { jBME.menu = function (e) { this.attach(e); return this }; jBME.menu.prototype = { jqPopMenu: undefined, jqBind: undefined, jqPopFrom: undefined, cfg: undefined, poper: undefined, attach: function (e) { this.cfg = e; this.jqPopMenu = $("#" + e.id); this.jqBind = $("#" + e.bindid); this.jqPopFrom = this.jqBind; this.jqPopMenu.data("menu", this); this.poper = new jBME.Poper(this.jqPopMenu); this.poper.defaultWrap(); this.poper.mask = true; this.initImg(); this.bindEvent() }, initImg: function () { this.jqPopMenu.find("> .bc_link").each(function () { var e = $(this); var t = e.children(); if ($.isEmptyObject(t) || !$(t[0]).is("img")) { e.prepend("<img align='absmiddle' src='" + jBME.theme.defaultPath + "/images/empty.gif'/>") } }) }, getItems: function () { return this.jqPopMenu.find(">.bc_link") }, bindEvent: function () { var e = this; if ("" != this.cfg.event) { this.jqBind.bind(this.cfg.event, function () { e.showMenu() }) } this.getItems().each(function () { var t = $(this); t.unbind("click.menuitem").bind("click.menuitem", function (n) { n.stopPropagation(); if (jBME.util.isDisabled(t)) { n.preventDefault(); return } e.hideMenu(); var r = new jQuery.Event("menuItemClick"); r.stopPropagation(); r.jqItem = t; r.menuObj = e; e.jqPopMenu.trigger(r) }) }) }, showMenuFrom: function (e) { this.jqPopFrom = e; this.showMenu() }, showMenu: function () { function t(t) { var n = new jQuery.Event(t); n.menuObj = e; n.stopPropagation(); e.jqPopMenu.trigger(n) } this.hideMenu(); var e = this; if (jBME.util.isDisabled(e.jqBind)) { return } t("beforeShow"); this.poper.show(this.jqPopFrom); t("afterShow"); $(document).bind("click." + this.cfg.id, function (t) { var n = $(t.target); var r = e; if (0 != n.closest("[id=" + e.cfg.id + "]").length) { return } if (0 != n.closest("[id=" + e.cfg.bindid + "]").length) { return } if (t.target == e.jqPopFrom.get(0)) { return } if ($.contains(e.jqPopFrom.get(0), t.target)) { return } e.hideMenu() }) }, hideMenu: function () { if (this.jqPopMenu.is(":hidden")) { return } var e = new jQuery.Event("beforeHide"); e.menuObj = this; e.stopPropagation(); this.jqPopMenu.trigger(e); this.poper.hide(); $(document).unbind("click." + this.cfg.id) } } })(); (function () { jBME.DataGrid = function (e) { this.attach(e); return this }; jBME.DataGrid.prototype = { jqDataGrid: undefined, otherPageCheckCount: 0, checkName: undefined, attach: function (e) { this.jqDataGrid = $("#" + e); this.init() }, init: function () { var e = $(".cbme_col_check", this.jqDataGrid); if (0 == e.length) { return 0 } var t = $(e[0]); this.checkName = t.attr("name"); var n = this; if (t.hasClass("cbme_crosspages")) { t.bind("beforesubmit", function () { n.updateCheckName() }) } var r = t.attr("allCheckCount"); var i = 0; e.each(function () { $(this).attr("orgName", n.checkName); if (this.checked) { i++ } }); this.otherPageCheckCount = r - i }, updateCheckName: function () { var e = $(".cbme_col_check", this.jqDataGrid); var t = this; var n = 0; e.each(function () { var e = $(this); if (this.checked) { e.attr("name", t.checkName + "[" + (t.otherPageCheckCount + n) + "]"); n++ } else { e.removeAttr("name") } }) } } })(); (function () { jBME.SearchBox = function (e) { this.attach(e); return this }; jBME.SearchBox.prototype = { jqSearchBox: undefined, jqInput: undefined, jqSearchBtn: undefined, event: undefined, value: undefined, attach: function (e) { this.jqSearchBox = $("#" + e); this.jqInput = $("#" + e + "_input"); this.jqSearchBtn = $("#" + e + "_search"); var t = this; this.jqInput.bind("keypress", function (e) { if (13 == e.which || 10 == e.which && e.ctrlKey) { t.event = e; t.doTrigger() } }); this.jqSearchBtn.bind("click", function (e) { t.event = e; t.doTrigger() }) }, doTrigger: function () { this.value = this.jqInput.val(); var e = new jQuery.Event("search"); e.value = this.value; e.isNext = !this.event.ctrlKey; e.stopPropagation(); this.jqSearchBox.trigger(e); this.event = undefined } } })(); (function () { jBME.SelectTree = function (e) { this.attach(e); this.adjustHeight($("div#" + e.settings.id).height()); return this }; jBME.SelectTree.prototype = { objTree: undefined, jqTree: undefined, jqSelectedBox: undefined, attach: function (e) { this.objTree = e; this.jqTree = $("#" + e.settings.id); this.jqSelectedBox = $("#" + e.settings.id + "_selected"); var t = this; var n = $.tree.plugins.checkbox.get_checked(this.objTree); n.each(function (e) { var n = $(this).children("a[bmeCheck]"); var r = n.children("input.checkbox-input"); if (0 == r.length) { return } t.addNodePath(n) }); this.jqTree.bind("check", function (e) { if (null == e.jqInput) { return } if (e.checked) { t.addNodePath(e.node); return } t.removeNodePath(e.node) }) }, addNodePath: function (e) { var t = e.children("input.checkbox-input"); if (!t.attr("checked")) { return } var n = $("<div class='treepath_row'></div>").appendTo(this.jqSelectedBox); e.data("row", n); var r = e.parent(); { var i = e.attr("icon"); if (typeof i == "undefined" || i == "" || i == null) { i = jBME.theme.customPath + "/images/tree/icon_shiftleft.png" } var s = $("<div class='treepath_text'><div class='treepath_text_inner'>" + "<img src='" + i + "' width='16' height='16' border='0' style='padding:0 4px;' align='absmiddle' />" + e.attr("nodeface") + "</div></div>").appendTo(n) } n.hover(function () { $(this).addClass("treepath_row_over") }, function () { $(this).removeClass("treepath_row_over") }); n.bind("click", function () { var e = $.tree.reference(r); e.find_node(r) }); var o = $("<div class='treepath_delbtn'> </div>").appendTo(n); o.bind("click", function () { $.tree.plugins.checkbox.uncheck(r); n.remove() }) }, removeNodePath: function (e) { var t = e.data("row"); t.remove() }, adjustHeight: function (e) { var t = $("#" + this.objTree.settings.id + "_div"); var n = 271; var r = n + 29; t.css("height", n); this.jqSelectedBox.css("height", r); if (e) { var i = parseInt(e); var s = $("#selectTreeTbl_" + this.objTree.settings.id); var o = s.outerHeight(true); n = i - (o - n); if (n < 0) n = 0; t.height(n); r = i - (o - r); this.jqSelectedBox.height(r) } } } })(); (function () { jBME.Panel = function (e) { this.attach(e); return this }; jBME.Panel.prototype = { jqPanel: undefined, jqHeader: undefined, attach: function (e) { this.jqPanel = $("#" + e); this.jqHeader = $("#" + e + "_header"); this.bindEvent() }, open: function () { this.jqPanel.removeClass("tpanel_closed") }, close: function () { this.jqPanel.addClass("tpanel_closed") }, toggleClose: function () { this.jqPanel.toggleClass("tpanel_closed") }, isOpen: function () { return !this.jqPanel.hasClass("tpanel_closed") }, bindEvent: function () { function t() { var t = e.jqPanel.find("> .panel_title"); t.bind("click", function (t) { if (jBME.util.isDisabled(e.jqPanel)) { return } var n = $(t.target); if (n.closest(".panel_header").size() > 0) { return } e.toggleClose() }) } function n() { var t = e.jqHeader.find(".panel_closebtn"); t.bind("click", function (t) { if (jBME.util.isDisabled(e.jqPanel)) { return } e.jqPanel.remove() }) } function r() { var t = "afterValid"; e.jqPanel.unbind(t).bind(t, function (t) { if (e.isOpen()) { return } var n = e.jqPanel.find("[vStatus='fail']"); if (0 == n.length) { return } e.open() }) } var e = this; t(); n(); r() } } })()