@model KRBAccounting.Domain.Entities.ScExamMarkSetup
@using KRBAccounting.Service
<tr class="subject-detail-entry detail-entry deletable">
    @using (Html.BeginCollectionItem("subjectEntry"))
    {
        <td class="sno">
            @ViewBag.sno
        </td>
        <td>
            @Html.HiddenFor(x => x.SubjectType)
             @Html.HiddenFor(x => x.ClassType)
            @Html.HiddenFor(x => x.SubjectId, new { @class = "hdn_Subject_Id" })
            <input type="text"  class = "text_subject input-120 input" value="@if (Model.Subject != null)
                                                                                        {
                                                                                                @Model.Subject.Description
                                                                                        }
                                                                                               "  title="Subject "  entermsg = "Press F1 for existing Account list." />
        </td>
        <td>
            @Html.HiddenFor(x => x.ResultSystem, new { @class = "hdn_ResultSystem_Id" })
            <input type="text" class = "text_ResultSystem input-90 input"  readonly="readonly" value="@UtilityService.GetResultSystem(Model.ResultSystem)" href="@Url.Action("GetEnumResultSystemList","School")"  title="Result System"  entermsg = "Press F1 for existing Account list." />
        </td>
        <td>
            @Html.HiddenFor(x => x.EvaluateForType, new { @class = "hdn_EvaluateForType_Id" })
            <input type="text" class = "text_EvaluateForType input-90 input" readonly="readonly" value="@UtilityService.GetEvaluateForPass(Model.EvaluateForType)"  href="@Url.Action("GetEnumEvaluateForPassList","School")"  title="Evaluation For Pass"  entermsg = "Press F1 for existing Account list." />
        </td>
        if (Model.ClassType == 1 || Model.ClassType == 3)
                                                                                        {
        <td>
            @Html.TextBoxFor(x => x.TheoryFullMark, new { @class = "TheoryFullMark input-90 input" })
            @Html.ValidationMessageFor(x => x.TheoryFullMark)
        </td>
        <td>
            @Html.TextBoxFor(x => x.TheoryPassMark, new { @class = "TheoryPassMark input-90 input" })
            @Html.ValidationMessageFor(x => x.TheoryPassMark)
        </td>
            
            
                                                                                        }
                                                                                        else
                                                                                        {
        <td>
            @Html.TextBoxFor(x => x.TheoryFullMark, new { @class = "TheoryFullMark input-90 input", @disabled = "disabled" })
            @Html.ValidationMessageFor(x => x.TheoryFullMark)
        </td>
        <td>
            @Html.TextBoxFor(x => x.TheoryPassMark, new { @class = "TheoryPassMark input-90 input", @disabled = "disabled" })
            @Html.ValidationMessageFor(x => x.TheoryPassMark)
        </td>
                                                                                        }
        if (Model.ClassType == 2 || Model.ClassType == 3)
                                                                                        {
        <td>
            @Html.TextBoxFor(x => x.PracticalFullMark, new { @class = "PracticalFullMark input-90 input" })
            @Html.ValidationMessageFor(x => x.PracticalFullMark)
        </td>
        <td>
            @Html.TextBoxFor(x => x.PracticalPassMark, new { @class = "PracticalPassMark input-90 input" })
            @Html.ValidationMessageFor(x => x.PracticalPassMark)
        </td>
                                                                                        }
                                                                                        else
                                                                                        {
        <td>
            @Html.TextBoxFor(x => x.PracticalFullMark, new { @class = "PracticalFullMark input-90 input", @disabled = "disabled" })
            @Html.ValidationMessageFor(x => x.PracticalFullMark)
        </td>
        <td>
            @Html.TextBoxFor(x => x.PracticalPassMark, new { @class = "PracticalFullMark input-90 input", @disabled = "disabled" })
            @Html.ValidationMessageFor(x => x.PracticalPassMark)
        </td>
                                                                                        }
        <td>
            @Html.TextBoxFor(x => x.Total, new { @class = "TotalMark input-90 input", @readonly = "readonly" })
        </td>
        <td>
            @Html.TextBoxFor(x => x.Narration, new { @class = "narration input-160 input", entermsg = "Enter Narration or press F1 for existing Narration List." })
        </td>
@* <td>
                <img src="../../Content/img/delete.png" width="15px" class="del-row">
            </td>*@

    }
</tr>
